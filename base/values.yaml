# -- Docker image configuration
image:
  repository: 123456789012.dkr.ecr.ap-south-1.amazonaws.com/myapp
  tag: "latest"                  # overridden per PR by Argo CD ({{ .head_sha }})
  pullPolicy: IfNotPresent

# -- Secret for pulling images from ECR
imagePullSecrets:
  - name: regcred                # this secret must exist in each namespace (see notes below)

# -- Application service
service:
  type: ClusterIP
  port: 80
  targetPort: 8080               # your container port (update if different)

# -- Ingress configuration (PRs use wildcard subdomain)
ingress:
  enabled: true
  className: "nginx"             # or "alb" if using AWS ALB ingress
  annotations:                   # extra annotations for ingress controller
    kubernetes.io/ingress.class: nginx
  hosts:
    - host: app.example.com      # overridden per PR: app-pr-123.preview.afsarblogs.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: preview-tls    # optional: cert-manager wildcard TLS secret
      hosts:
        - "*.preview.afsarblogs.com"

# -- Autoscaling (optional)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80

# -- Resource requests & limits (tune for your app)
resources:
  requests:
    cpu: 100m
    memory: 128Mi
  limits:
    cpu: 500m
    memory: 512Mi

# -- Environment variables
env:
  - name: NODE_ENV
    value: "production"
  - name: LOG_LEVEL
    value: "info"

# -- Extra secrets/configmaps mounted into pods (if needed)
extraEnvFrom: []
# Example:
# extraEnvFrom:
#   - secretRef:
#       name: my-secret
#   - configMapRef:
#       name: my-configmap

# -- Liveness & Readiness probes
livenessProbe:
  httpGet:
    path: /healthz
    port: 8080
  initialDelaySeconds: 10
  periodSeconds: 10

readinessProbe:
  httpGet:
    path: /readyz
    port: 8080
  initialDelaySeconds: 5
  periodSeconds: 5
